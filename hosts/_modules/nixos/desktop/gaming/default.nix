{
  config,
  lib,
  pkgs,
  ...
}: let
  cfg = config.modules.desktop.gaming;
  qr = "${toString cfg.lowlatency.quantum}/${toString cfg.lowlatency.rate}";
in {
  options.modules.desktop.gaming = {
    enable = lib.mkEnableOption "desktop gaming";
    lowlatency.quantum = lib.mkOption {
      description = "Minimum quantum to set";
      type = lib.types.int;
      default = 64;
      example = 32;
    };
    lowlatency.rate = lib.mkOption {
      description = "Rate to set";
      type = lib.types.int;
      default = 48000;
      example = 96000;
    };
  };

  # ref:https://wiki.nixos.org/wiki/Steam
  config = lib.mkIf cfg.enable {
    environment.systemPackages = with pkgs; [
      prismlauncher # minecraft
      mangohud # fps monitor
      lutris # launcher
    ];
    programs.gamemode.enable = true;

    # ref:https://github.com/ryan4yin/nix-config/blob/main/hosts/idols-ai/gaming.nix
    programs.steam = {
      enable = true;
      gamescopeSession.enable = true;
      protontricks.enable = true;
      extest.enable = true;
      fontPackages = [
        pkgs.wqy_zenhei # Need by steam for Chinese
      ];
    };

    # ref:https://github.com/fufexan/nix-gaming/blob/master/modules/pipewireLowLatency.nix
    services.pipewire = {
      enable = true;
      extraConfig.pipewire = {
        "99-lowlatency" = {
          context = {
            properties.default.clock.min-quantum = 64;
            modules = [
              {
                name = "libpipewire-module-rtkit";
                flags = ["ifexists" "nofail"];
                args = {
                  nice.level = -15;
                  rt = {
                    prio = 88;
                    time.soft = 200000;
                    time.hard = 200000;
                  };
                };
              }
              {
                name = "libpipewire-module-protocol-pulse";
                args = {
                  server.address = ["unix:native"];
                  pulse.min = {
                    req = qr;
                    quantum = qr;
                    frag = qr;
                  };
                };
              }
            ];
            stream.properties = {
              node.latency = qr;
              resample.quality = 1;
            };
          };
        };
      };
      wireplumber = {
        enable = true;
        configPackages = let
          matches = lib.generators.toLua {
            multiline = false;
            indent = false;
          } [[["node.name" "matches" "alsa_output.*"]]];
          apply_properties = lib.generators.toLua {} {
            "audio.format" = "S32LE";
            "audio.rate" = cfg.lowlatency.rate * 2;
            "api.alsa.period-size" = 2;
          };
        in [
          (pkgs.writeTextDir "share/lowlatency.lua.d/99-alsa-lowlatency.lua" ''
            -- Generated by nix-gaming
            alsa_monitor.rules = {
              {
                matches = ${matches};
                apply_properties = ${apply_properties};
              }
            }
          '')
        ];
      };
    };

    # ref:https://github.com/fufexan/nix-gaming/blob/master/modules/platformOptimizations.nix
    boot.kernel.sysctl = {
      # 20-shed.conf
      "kernel.sched_cfs_bandwidth_slice_us" = 3000;
      # 20-net-timeout.conf
      # This is required due to some games being unable to reuse their TCP ports
      # if they're killed and restarted quickly - the default timeout is too large.
      "net.ipv4.tcp_fin_timeout" = 5;
      # 30-splitlock.conf
      # Prevents intentional slowdowns in case games experience split locks
      # This is valid for kernels v6.0+
      "kernel.split_lock_mitigate" = 0;
      # 30-vm.conf
      # USE MAX_INT - MAPCOUNT_ELF_CORE_MARGIN.
      # see comment in include/linux/mm.h in the kernel tree.
      "vm.max_map_count" = 2147483642;
    };
  };
}
